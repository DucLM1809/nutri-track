// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Token {
  id          Int       @id @default(autoincrement())
  value       String
  type        TokenType
  userId      Int
  lastDeposit DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model User {
  id          Int         @id @default(autoincrement())
  name        String
  email       String      @unique
  password    String
  avatar      String
  dob         DateTime
  gender      Gender      @default(MALE)
  role        Role        @default(USER)
  accountType AccountType @default(BASIC)

  expertProfileId Int?
  expertProfile   ExpertProfile? @relation(fields: [expertProfileId], references: [id])

  bmiRecords        BmiRecords[]
  medicalConditions MedicalConditionsUser[]
  applications      Applications[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExpertProfile {
  id          Int     @id @default(autoincrement())
  certImage   String
  description String?

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BmiRecords {
  id     Int   @id @default(autoincrement())
  weight Float
  height Float

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicalConditions {
  id          Int     @id @default(autoincrement())
  name        String
  description String? @db.Text
  high        String? @db.Text
  low         String? @db.Text
  avoid       String? @db.Text

  users MedicalConditionsUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicalConditionsUser {
  id Int @id @default(autoincrement())

  userId Int
  user   User @relation(fields: [userId], references: [id])

  conditionId      Int
  medicalCondition MedicalConditions @relation(fields: [conditionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Applications {
  id          Int               @id @default(autoincrement())
  status      ApplicationStatus
  type        ApplicationType
  image       String
  description String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  approvedById Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  EXPERT
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AccountType {
  BASIC
  SILVER
  GOLD
  DIAMOND
  VIP
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ApplicationType {
  EXPERT
}
